# BOOLEANS AND COMPARISON OPERATORS
-----------------------------------

* Introduction
--------------
Have you ever noticed that hyperlinks change color after you click them? If the link has been clicked, then the web browser renders it in purple, rather than blue. The programming concept 
that makes this possible is called conditionals.

This might be a simple example, but conditionals underlie the complex behavior of computer programs from Gmail, to Mario games, to Microsoft Office. Conditionals make it possible for 
programs to decide how to react to a wide variety of situations.

But computers aren’t intelligent—in order for them to make decisions they have to be programmed with a set of rules to follow.

In this lesson, we’ll explore how we write programs that can make decisions with conditionals.

===================================================================================================================================================================

* If Statements
---------------
We’re going to learn about a specific type of conditional called an if statement. An if statement follows this basic structure:

if (/*some condition*/) {
 // Do something...
}
 
The parentheses hold the condition we want the computer to check. If the condition is true, the code inside the code block ({ }) will run; if it’s not true, the code will not run.

The foundation of any conditional is the boolean data type. A boolean can have one of two values: TRUE or FALSE. Note that these are the words without quotation marks—the string "TRUE" is 
not the same as the boolean value TRUE. These values are not case sensitive, but we follow the convention of making them uppercase.

If we wanted to write code to approximate our hyperlink example from the previous exercise, we might write something like this:

$is_clicked = TRUE;
if ($is_clicked) {
  $link_color = "purple";
  echo $link_color;
}
 
In the code above, we ask the computer to check the $is_clicked variable as the condition. If its value is TRUE, the value of $link_color will be assigned "purple" and printed.

In the code above, were our condition not met, we’d skip over the code turning the link purple, but what should we do instead? If the link has been clicked, the color should be purple, 
otherwise it should be blue. We can include a block of code to run when the condition is not met with the keyword else:

$is_clicked = FALSE;
if ($is_clicked) {
  $link_color = "purple";
  echo $link_color;
} else {
  $link_color = "blue";
  echo $link_color;
}
 
We changed the value of $is_clicked to FALSE so that the if block will not run. Rather, the else block will run and blue will be printed to the terminal.

Let’s make some conditionals!

index.php
---------
<?php
namespace Codecademy;
function markAnswer($is_correct) {
  if ($is_correct) {
    return "green";
  } else {
    return "red";
  }
}

echo markAnswer(TRUE);
echo "\n";
echo markAnswer(FALSE);

==================================================================================================================================================================

* Comparison Operators
----------------------
The condition, or expression, in an if statement can hold a boolean value—like TRUE or FALSE, a variable assigned to one of those values, or an expression that evaluates to TRUE or FALSE.

Just as we can represent a value of five with 5 or with an expression that evaluates to five e.g. 3 + 2, we can write expressions that evaluate to TRUE or FALSE. Comparison operators 
evaluate a relationship between two operands and return a boolean value.

The less than operator (<) will return TRUE if the left operand is less than the right operand and FALSE if it’s not:

1 < 10; // Evaluates to: TRUE
11 < 3; // Evaluates to: FALSE
 
The less than or equal to operator (<=) will return TRUE if the left operand is less than or equal to the right operand and FALSE if it’s not:

1 <= 10; // Evaluates to: TRUE
4 <= 4; // Evaluates to: TRUE
18 <= 2; // Evaluates to: FALSE
 
The greater than operator (>) will return TRUE if the left operand is greater than the right operand and FALSE if it’s not. And the greater than or equal to operator (>=) will return TRUE 
if the left operand is greater than or equal to the right operand and FALSE if it’s not:

1 > 10; // Evaluates to: FALSE
11 > 3; // Evaluates to: TRUE
1 >= 10; // Evaluates to: FALSE
11 >= 11; // Evaluates to: TRUE
54 >= 10; // Evaluates to: TRUE
 
Let’s practice writing conditionals using these operators!

index.php
---------
<?php
namespace Codecademy;

function chooseCheckoutLane($number_of_items) {
  if ($number_of_items <= 12) {
    return "express lane";
  } else {
    return "regular lane";
  }
}

function canIVote($age) {
  if ($age >= 18) {
    return "yes";
  } else {
    return "no";
  }
}

echo chooseCheckoutLane(12);
echo "\n";
echo chooseCheckoutLane(11);
echo "\n";
echo chooseCheckoutLane(13);
echo "\n";
echo canIVote(18);
echo "\n";
echo canIVote(19);
echo "\n";
echo canIVote(17);

==================================================================================================================================================================

* Identical and Not Identical Operators
---------------------------------------
In this exercise we’re going to learn a few more comparison operators and see how we can use them to compare more than just number values.

The identical operator (===) will return TRUE if the left operand is the same as the right operand and FALSE if it’s not:

$num = 5;
$num === 5; // Evaluates to: TRUE
10 === 10; // Evaluates to: TRUE
$num === 20; // Evaluates to: FALSE
 
When we think about comparing two values, we’ll need to think like a computer. Are "hello" and "Hello" the same?

$greeting = "hello";
$greeting === "hello"; // Evaluates to: TRUE
"hello" === "hel" . "lo";   // Evaluates to: TRUE
$greeting === "HELLO"; // Evaluates to: FALSE
 
The not identical operator (!==) will return TRUE if the two operators are different and FALSE if they’re the same:

$num = 5;
$num !== 5; // Evaluates to: FALSE
10 !== 10; // Evaluates to: FALSE
$num !== 20; // Evaluates to: TRUE
 
$greeting = "hello";
"hello" !== "hello"; // Evaluates to: FALSE
$greeting !== "HELLO"; // Evaluates to: TRUE
 
When looking through PHP code, you may encounter another operator—the equal operator (==). Like the identical operator, the equal operator will return TRUE if the left operand is the same 
as the right operand and FALSE if it’s not. But the equal operator is less strict than the identical operator and can have some hard to predict results, so we prefer to only use the 
identical operator.

Awesome. Let’s practice!

index.php
---------
<?php
namespace Codecademy;

function agreeOrDisagree($string1, $string2) {
  if ($string1 === $string2) {
    return "You agree!";
  } else {
    return "You disagree!";
  }
}

echo agreeOrDisagree("red", "blue");
echo "\n";
echo agreeOrDisagree("red", "red");
echo "\n";

function checkRenewalMonth($month) {
  if (date("F") !== $month) {
    return "Welcome!";
  } else {
    return "Time to renew";
  }
}

echo checkRenewalMonth("July");
echo "\n";
echo checkRenewalMonth("August");

==================================================================================================================================================================

* Elseif Statements
-------------------
So far, we’ve been writing conditionals that can only handle one condition. If that condition is met, we do one thing, otherwise we do something else. This only allows us one or two 
courses of action. But programs can be far more complex.

Consider letter grades on a school assignment:

	. If the grade is less than 60, it’s an F

	. Or else, if the grade is less than 70, it’s a D.

	. Or else, if the grade is less than 80, it’s a C.

	. Or else, if the grade is less than 90, it’s a B.

	. Or else, it’s an A.

We can write conditionals with multiple if statements using the elseif construction. The computer will continue through each condition until it finds a condition which is met or gets to 
the end—whichever comes first.

Let’s implement our letter grades example in code:

$grade = 88;
if ($grade < 60) {
  echo "You got an F";
} elseif ($grade < 70) {
  echo "You got a D";
} elseif ($grade < 80) {
  echo "You got a C";
} elseif ($grade < 90) {
  echo "You got a B";
} else {
  echo "You got an A";
}
 
In the code above, $grade has a value of 88. The computer will check each condition until one is met and run that block of code. When it gets to the condition $grade < 90, it evaluates to 
TRUE. That code block executes, and You got a B is logged to the terminal.

Notice that the order of our conditionals is important. The grade 55 would satisfy the condition $grade < 90, but it meets the condition intended for it, $grade < 60 first. What if the 
elseif statements were in a different order?

$grade = 55;
if ($grade < 90) {
  echo "You got a B";
} elseif ($grade < 80) {
  echo "You got a C";
} elseif ($grade < 70) {
  echo "You got a D";
} elseif ($grade < 60) {
  echo "You got an F";
} else {
  echo "You got an A";
}
 
The code above will output You got a B to the terminal since the computer will run the first TRUE condition. We need to take care when constructing our conditionals that they have the 
outcome we want.

Note: you may encounter the keywords else if with a space separating the two words. In many situations, else if will work the same way as elseif. Since elseif works more universally, 
that’s what we choose to use.

Let’s practice writing some elseif statements!

index.php
---------
<?php
namespace Codecademy;

function whatRelation($dna_percentage) {
  if ($dna_percentage === 100) {
    echo "identical twins";
  } elseif ($dna_percentage > 34) {
    echo "parent and child or full siblings";
  } elseif ($dna_percentage > 13) {
    echo "grandparent and grandchild, aunt/uncle and niece/nephew, or half siblings";
  } elseif ($dna_percentage > 5) {
    echo "first cousins";
  } elseif ($dna_percentage > 2) {
    echo "second cousins";
  } elseif ($dna_percentage > 0) {
    echo "third cousins";
  } else {
    echo "not genetically related";
  }
 }

 whatRelation(100);
 echo "\n";
 whatRelation(35);
 echo "\n";
 whatRelation(14);
 echo "\n";
 whatRelation(6);
 echo "\n";
 whatRelation(3);
 echo "\n";
 whatRelation(1);
 echo "\n";
 whatRelation(0);
 echo "\n";

==================================================================================================================================================================

* Switch Statement
------------------
We often want to compare a value, expression, or variable against many different possible values and run different code depending on which it matches. We can use a series of if/elseif 
statements which use the identical operator (===) or we can use a switch statement—an alternate syntax.

We wrote some code with if/elseif statements to print a string based on a student’s letter grade:

if ($letter_grade === "A"){
  echo "Terrific";
} elseif ($letter_grade === "B") {
  echo "Good";
} elseif ($letter_grade === "C") {
  echo "Fair";
} elseif ($letter_grade === "D") {
  echo "Needs Improvement";
} elseif ($letter_grade === "F") {
  echo "See me!";
} else {
  echo "Invalid grade"; 
}
 
Since this code involves a series of comparisons, it’s ripe for a switch statement! Let’s see it refactored with switch:

switch ($letter_grade){
  case "A":
    echo "Terrific";
    break;
  case "B":
    echo "Good";
    break;
  case "C":
    echo "Fair";
    break;
  case "D":
    echo "Needs Improvement";
    break;
  case "F":
    echo "See me!";
    break;
  default:
    echo "Invalid grade"; 
}
 
We begin the keyword switch followed by the value (or expression) we’ll be comparing—in this case, $letter_grade. We provide possible matches for the expression with the keyword case, the 
potential matching value, and the colon. For each case, we provide code that should run if that case matches. After each case, we include the keyword break to break out of the switch 
statement. We can provide a default that should run if none of the provided cases match.

A switch statement is a good example of code that might be preferable not because it’s shorter, but rather because it clearly indicates the purpose of the code; when looking at a switch 
statement we can quickly identify the important aspects of the code; this makes it easier to understand, extend, and debug.

index.php
---------
<?php
namespace Codecademy;
function airQuality($color) {
  switch ($color) {
    case "green":
      echo "good";
      break;
    case "yellow":
      echo "moderate";
      break;
    case "orange":
      echo "unhealthy for sensitive groups";
      break;
    case "red":
      echo "unhealthy";
      break;
    case "purple":
      echo "very unhealthy";
      break;
    case "maroon":
      echo "hazardous";
      break;
    default:
      echo "invalid color";
  }
}

airQuality("green");
echo "\n";
airQuality("yellow");
echo "\n";
airQUality("orange");
echo "\n";
airQuality("red");
echo "\n";
airQuality("purple");
echo "\n";
airQuality("maroon");
echo "\n";
airQuality("blue");

==================================================================================================================================================================

* Switch Statements: Fall through
---------------------------------
In the previous exercise, we taught you to use the keyword break after the block for each case. Without the keyword break, not only will the first matching case’s block run, but so will 
all the code in the subsequent cases! This is known as fall through. The keyword break tells the computer to break out of the switch statement, without it, it will fall through the rest 
of the switch executing all the code until it reaches a break, a return, or the end of the statement:

$letter = "a";
switch ($letter) {
  case "a":
    echo "a";
  case "b":
    echo "b";
  case "c":
    echo "c";
  case "d":
    echo "d";
}
 
The code above will output abcd. Only the first case (case "a") actually matches the value of $letter, but since the above code doesn’t have any breaks all of the code in the switch will 
execute. Fall through may seem like a drag, but it can be useful when we want multiple cases to execute the same code:

switch ($day_of_week) {
  case "Monday":
  case "Tuesday":
    echo "Just getting started!";
    break;
  case "Wednesday":
    echo "Humpday!";
    break;
  case "Thursday":
  case "Friday":
    echo "Almost the weekend!";
    break;
  case "Saturday":
  case "Sunday":
    echo "Enjoy!";
    break;
}
 
In the code above, we use fall through to our advantage by placing cases that should execute the same code next to each other and having them share a code block. So, for example, if 
$day_of_week has the value "Monday" or "Tuesday", the string "Just getting started!" will be printed.

It’s ok if you don’t find fall through useful in your own code. But knowing how to use it should remind you that it exists and that you need those breaks!

index.php
---------
<?php
namespace Codecademy;

function returnSeason($month) {
  switch ($month) {
    case "December":
    case "January":
    case "February":
      return "winter";
      break;
    case "March":
    case "April":
    case "May":
      return "spring";
      break;
    case "June":
    case "July":
    case "August":
      return "summer";
      break;
    case "September":
    case "October":
    case "November":
      return "fall";
      break;
  }
}

echo returnSeason("December");
echo "\n";
echo returnSeason("March");
echo "\n";
echo returnSeason("June");
echo "\n";
echo returnSeason("September");

==================================================================================================================================================================

* Ternary Operator
------------------
PHP offers a short-hand syntax to conditionally return a value. Before learning it, let’s consider some example code:

$isClicked = FALSE;
if ( $isClicked ) {
  $link_color = "purple";
} else {
  $link_color = "blue";
}
 
In the code above, our condition checks the value of the $isClicked variable. If it’s TRUE we assign $link_color to "purple", otherwise we assign it the value "blue". Our code is somewhat 
repetitive—the code in each code block is only slightly different.

A ternary operator (?:) is another conditional operator. It takes three operands and returns a value:

	. The first operand is a condition to check. This is followed by a question mark ?.

	. The second operand is an expression to return if the condition is TRUE. This is followed by a colon (:).

	. The third operand is an expression to return if the condition is FALSE.

Let’s see our previous example refactored with the ternary operator:

$isClicked = FALSE;
$link_color = $isClicked ? "purple" : "blue";
 
The ternary operator allows us to write fewer lines of code while maintaining readability.

Note that code in the expression will be executed, but the intended use of the ternary is to conditionally return a value not to execute code.

Let’s get some practice with the ternary operator!

index.php
---------
<?php
namespace Codecademy;

function ternaryCheckout($number) {
  return $number <= 12 ? "express lane" : "regular lane";
}

function ternaryVote($age) {
  return $age >= 18 ? "yes" : "no";
}

echo ternaryCheckout(13);
echo "\n";
echo ternaryCheckout(12);
echo "\n";
echo ternaryCheckout(11);
echo "\n";
echo "\n";
echo ternaryVote(18);
echo "\n";
echo ternaryVote(17);

==================================================================================================================================================================

* Truthy and Falsy
------------------
So far in our conditionals, we’ve been dealing with expressions that would evaluate to boolean values in any context. In practice, any value or expression in the condition will be 
converted to TRUE or FALSE. Take a look at the following real, working PHP code:

if ("What's going on?"){
  echo "Let us explain…";
} 
// Prints: Let us explain…
 
In the above code, the condition checks the truthiness of the string "What's going on?". The computer converts this value to TRUE and therefore executes the code in the block. We 
sometimes refer to code that will be converted to TRUE as truthy and code that will be converted to FALSE as falsy since they aren’t actually equivalent to those boolean values, but they 
will be treated as such in certain contexts. Most values and expressions are treated as truthy, so we’ll focus on those that are falsy:

	. Empty strings

	. null

	. an undefined or undeclared variable

	. an empty array

	. the number 0

	. the string "0"

Let’s see this in action:

if ("") {
  echo "this will not print";
} elseif (null) {
  echo "this will not print";
} elseif ([]) {
  echo "this will not print";
} elseif (0) {
  echo "this will not print";
} elseif ("0") {
  echo "this will not print";
} else {
  echo "Finally!";
}
 
Since none of the conditions above hold truthy values, the code will print Finally!.

This can be tricky, so let’s get some practice with it.

index.php
---------
<?php
namespace Codecademy;

function truthyOrFalsy($value) {
  if ($value) {
    return "True";
  }
  else {
    return "False";
  }
}

echo truthyOrFalsy("A random string");
echo "\n";
echo truthyOrFalsy("0");

==================================================================================================================================================================

* User Input: readline()
------------------------
The outcomes of programs we’ve been writing so far have been predetermined. Unless we manually change our code, it will produce the same results each time it’s run. But this isn’t very 
realistic. Programs often receive unexpected inputs or results which is why we need conditionals. Conditionals allow us to write flexible programs that handle this variability.

One common reason our programs need to be flexible is when they have user interaction. When we create a website, we don’t know exactly when a user will press a button or exactly what text 
they’ll input in a form. Writing programs that can handle unique user interaction is a big part of software development.

User interaction isn’t restricted to web development. We can enable user interaction in our terminal-based programs as well.

The built-in readline() function takes a string with which to prompt the user. It waits for the user to enter text into the terminal and returns that value as a string.

echo "Hi, I'm Aisle Nevertell. What's your name?\n";
$name = readline(">> ");
echo "\nNice to meet you, $name";
 
The code above prints, Hi, I'm Aisle Nevertell. What's your name?. Then, it prints >> to the terminal to prompt the user to type and awaits their input which it will save in the $name 
variable. If the user entered Alex, for example, the program would next print Nice to meet you, Alex to the terminal.

By incorporating in conditionals, we can take different actions depending on the user input:

echo "\nWhat's your favorite color?\n";
$color = readline(">> ");
if ($color === "green"){
  echo "\nCool, that's my favorite too!";
} else {
  echo "\nOh, $color is nice, I guess…";
}
 
In the code above, we prompt the user to enter their favorite color. If they say our favorite color (green), we give one response, otherwise we give a different response.

Let’s practice!

index.php
---------
<?php
namespace Codecademy;

echo "Hello, there. What's your first name?\n";
$name = readline(">> ");

$name_length = strlen($name);

if ($name_length > 8) {
  echo "Hi, ${name}. That's a long name.";
} elseif ($name_length > 3) {
  echo "Hi, ${name}.";
} else {
  echo "Hi, ${name}. That's a short name.";
}

==================================================================================================================================================================

* Review
--------
Woah! We covered a lot in this lesson. Good work. Let’s review what we learned:

	. Conditionals make it possible for programs to decide how to react to a wide variety of situations.

	. if statements allow us to run a block of code if a condition is met.

	. The boolean data type is either the value TRUE or FALSE and is the foundation of programmatic decision making.

	. We use else to include a block of code to run when the condition is not met.

	. Comparison operators evaluate a relationship between two operands and return a boolean value.

	. The less than operator (<)

	. The less than or equal to operator (<=)

	. The greater than operator (>)

	. The greater than or equal to operator (>=)

	. The Identical operator (===)

	. The not identical operator (!==)

	. We can write conditionals with multiple if statements using the elseif construction.

	. Instead of using a series of if statements when we want to compare a value, expression, or variable against many different possible values and run different code depending on 
	which it matches, we can use a switch statement.

	. The keyword break tells the computer to break out of the switch statement, without it, it will fall through the rest of the switch executing all the code until it reaches a 
	break or the end of the statement.

	. A ternary operator (?:) is shorthand conditional operator. It takes three operands (a condition to check, an expression to return if the condition is TRUE, and an expression to 
	return if the condition is FALSE).

	. Any value or expression inside a condition will be converted to TRUE or FALSE. We consider values that will convert to TRUE to be truthy and values that will convert to FALSE to 
	be falsy.

	. We can get user input from the terminal with the readline() function.

That really is a lot… Take some time to practice and review! You’re doing great.

index.php
---------
<?php
$gryffindor = 0;
$hufflepuff = 0;
$ravenclaw = 0;
$slytherin = 0;

//$answer1, $answer2, $answer3;

echo  "================\nThe Sorting Hat!\n================\n\n";


  // ~~~~~~~~~~ Question 1 ~~~~~~~~~~

  echo "Q1) When I'm dead, I want people to remember me as:\n\n  1) The Good\n  2) The Great\n  3) The Wise\n  4) The Bold\n\nEnter your answer (1-4): ";
  
  

  $answer1 = readline(">>");

  if ($answer1 === "1")
    $hufflepuff++;
  elseif ($answer1 === "2")
    $slytherin++;
  elseif ($answer1 === "3")
    $ravenclaw++;
  elseif ($answer1 === "4")
    $gryffindor++;

  // ~~~~~~~~~~ Question 2 ~~~~~~~~~~

  echo "\nQ2) Dawn or Dusk?\n\n  1) Dawn\n  2) Dusk\n\nEnter your answer (1-2): ";

  $answer2 = readline(">>");

  if ($answer2 === "1") 
  {
    
    $gryffindor++;
    $ravenclaw++;
  
  } 
  elseif ($answer2 === "2") 
  {

    $hufflepuff++;
    $slytherin++;

  }
  else 
  {

    echo "Invalid input\n";

  }

  // ~~~~~~~~~~ Question 3 ~~~~~~~~~~

  echo "\nQ3) Which kind of instrument most pleases your ear?\n\n  1) The violin\n  2) The trumpet\n  3) The piano\n  4) The drum\n\nEnter your answer (1-4): ";

  $answer3 = readline(">>");

  if ($answer3 === "1")
    $slytherin++;
  elseif ($answer3 === "2")
    $hufflepuff++;
  elseif ($answer3 === "3")
    $ravenclaw++;
  elseif ($answer3 === "4")
    $gryffindor++;

  // ~~~~~~~~~~ Question 4 ~~~~~~~~~~

  echo "\nQ4) Which road tempts you the most?\n\n  1) The wide, sunny grassy lane\n  2) The narrow, dark, lantern-lit alley\n  3) The twisting, leaf-strewn path through woods\n  4) The cobbled street lined (ancient buildings)\n\nEnter your answer (1-4): ";

  $answer4 = readline(">>");

  if ($answer4 === "1")
    $hufflepuff++;
  elseif ($answer4 === "2")
    $slytherin++;
  elseif ($answer4 === "3")
    $gryffindor++;
  elseif ($answer4 === "4")
    $ravenclaw++;
  
  // ========== Sorting ==========

  echo "Congrats on being sorted into... ";

  $max = 0;
  $house = "";

  if ($gryffindor > $max) 
  {

    $max = $gryffindor;
    $house = "Gryffindor";
    
  }

  if ($hufflepuff > $max) 
  {

    $max = $hufflepuff;
    $house = "Hufflepuff";

  }
  
  if ($ravenclaw > $max) 
  {

    $max = $ravenclaw;
    $house = "Ravenclaw";

  }
  
  if ($slytherin > $max) 
  {

    $max = $slytherin;
    $house = "Slytherin";

  }
  
  echo $house . "!\n";

==================================================================================================================================================================





























